// –ì–ª–æ–±–∞–ª–Ω–∏ –ø—Ä–æ–º–µ–Ω–ª–∏–≤–∏
let allProducts = [];  // –¢—É–∫ —â–µ –¥—ä—Ä–∂–∏–º –≤—Å–∏—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∏, –∑–∞—Ä–µ–¥–µ–Ω–∏ –æ—Ç —Å—ä—Ä–≤—ä—Ä–∞

const productsGrid = document.getElementById('productsGrid');
const statsContainer = document.getElementById('statsContainer');
const searchInput = document.getElementById('searchInput');
const filterButtons = document.querySelectorAll('.filter-btn');

// –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏—Ç–µ –æ—Ç —Å—ä—Ä–≤—ä—Ä–∞ (fetch –∫—ä–º /products)
async function loadProducts() {
  try {
    const res = await fetch('/products');
    if (!res.ok) throw new Error(`–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ: ${res.statusText}`);

    allProducts = await res.json();

    renderProducts(allProducts);
    renderStats(allProducts);
  } catch (err) {
    console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏—Ç–µ:', err);
    productsGrid.innerHTML = `<p>–ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏—Ç–µ.</p>`;
  }
}

// –†–µ–Ω–¥–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏ –≤ grid
function renderProducts(products) {
  if (!products.length) {
    productsGrid.innerHTML = '<p>–ù—è–º–∞ –Ω–∞–º–µ—Ä–µ–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏.</p>';
    return;
  }

  productsGrid.innerHTML = products.map(product => `
    <div class="product-card">
      <div class="product-image">
        <img src="${product.image}" alt="${product.name}">
      </div>
      <div class="product-info">
        <h3 class="product-name">${product.name}</h3>
        <div class="product-meta">
          <div class="plu-badge">${product.plu}</div>
          <div class="product-group">${product.group}</div>
        </div>
      </div>
    </div>
  `).join('');
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø—Ä–µ–±—Ä–æ—è–≤–∞–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏ –ø–æ –≥—Ä—É–ø–∏
function countProductsByGroup(products) {
  const counts = {};
  products.forEach(p => {
    counts[p.group] = (counts[p.group] || 0) + 1;
  });
  return counts;
}

// –†–µ–Ω–¥–µ—Ä–∏—Ä–∞–Ω–µ –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–∞–¥–µ–Ω –Ω–∞–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∏
function renderStats(products) {
  const totalProducts = products.length;
  const groupCounts = countProductsByGroup(products);

  let html = `
    <div class="stat-card">
      <div class="stat-value">${totalProducts}</div>
      <div class="stat-label">–û–±—â–æ –ø—Ä–æ–¥—É–∫—Ç–∏</div>
    </div>
  `;

  const groups = [
    "–ü–ª–æ–¥–æ–≤–µ",
    "–ó–µ–ª–µ–Ω—á—É—Ü–∏",
    "–ü–µ—á–∏–≤–∞ —Å–ª–∞–¥–∫–∏",
    "–ü–µ—á–∏–≤–∞ —Å–æ–ª–µ–Ω–∏",
    "–•–ª—è–±–æ–≤–µ, –±–∞–≥–µ—Ç–∏, —Ö–ª–µ–±—á–µ—Ç–∞"
  ];

  groups.forEach(group => {
    html += `
      <div class="stat-card">
        <div class="stat-value">${groupCounts[group] || 0}</div>
        <div class="stat-label">${group}</div>
      </div>
    `;
  });

  statsContainer.innerHTML = html;
}

// –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –ø–æ —Ç—ä—Ä—Å–µ–Ω–µ
function filterProducts(searchTerm = '') {
  const filtered = allProducts.filter(product =>
    product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    product.plu.includes(searchTerm)
  );
  renderProducts(filtered);
  renderStats(filtered);
}

// –§–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –ø–æ –≥—Ä—É–ø–∞
function filterProductsByGroup(group) {
  let filtered;
  if (group === 'all') {
    filtered = allProducts;
  } else {
    filtered = allProducts.filter(product => product.group === group);
  }
  renderProducts(filtered);
  renderStats(filtered);
}

// –°–ª—É—à–∞—Ç–µ–ª–∏ –Ω–∞ —Å—ä–±–∏—Ç–∏—è

// –¢—ä—Ä—Å–µ–Ω–µ
if (searchInput) {
  searchInput.addEventListener('input', e => {
    // –ü—Ä–∏ —Ç—ä—Ä—Å–µ–Ω–µ –º–∞—Ö–∞–º–µ –∞–∫—Ç–∏–≤–Ω–∏—è —Ñ–∏–ª—Ç—ä—Ä (–±—É—Ç–æ–Ω)
    filterButtons.forEach(btn => btn.classList.remove('active'));
    filterProducts(e.target.value);
  });
}

// –§–∏–ª—Ç—Ä–∏ –ø–æ –≥—Ä—É–ø–∏
filterButtons.forEach(button => {
  button.addEventListener('click', () => {
    filterButtons.forEach(btn => btn.classList.remove('active'));
    button.classList.add('active');

    const group = button.dataset.group; // –≤–∑–µ–º–∞ —Å–µ –æ—Ç data-group –∞—Ç—Ä–∏–±—É—Ç–∞
    filterProductsByGroup(group);

    // –ò–∑—á–∏—Å—Ç–≤–∞–º–µ –ø–æ–ª–µ—Ç–æ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ –ø—Ä–∏ —Ñ–∏–ª—Ç—Ä–∏—Ä–∞–Ω–µ –ø–æ –≥—Ä—É–ø–∞
    if (searchInput) searchInput.value = '';
  });
});

// üéØ –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –Ω–æ–≤ –ø—Ä–æ–¥—É–∫—Ç
document.getElementById('addButton').addEventListener('click', async () => {
  const name = document.getElementById('newName').value.trim();
  const plu = document.getElementById('newPlu').value.trim();
  const group = document.getElementById('newGroup').value;
  const imageInput = document.getElementById('newImage');
  const imageFile = imageInput.files[0];

  if (!name || !plu || !group || !imageFile) {
    showNotification('–ú–æ–ª—è, –ø–æ–ø—ä–ª–Ω–µ—Ç–µ –≤—Å–∏—á–∫–∏ –ø–æ–ª–µ—Ç–∞ –∏ –∏–∑–±–µ—Ä–µ—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.', 'error');
    return;
  }

  const formData = new FormData();
  formData.append('name', name);
  formData.append('plu', plu);
  formData.append('group', group);
  formData.append('image', imageFile);

  try {
    const res = await fetch('/products', {
      method: 'POST',
      body: formData
    });

    if (!res.ok) {
      const err = await res.json();
      showNotification(err.error || '–ù–µ—É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤—è–Ω–µ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç.', 'error');
      return;
    }

    const newProduct = await res.json();

    // –ü—Ä–µ–∑–∞—Ä–µ–∂–¥–∞–º–µ –¥–∞–Ω–Ω–∏—Ç–µ –æ—Ç–Ω–æ–≤–æ –æ—Ç —Å—ä—Ä–≤—ä—Ä–∞ (–ø–æ-–¥–æ–±—Ä–µ –æ—Ç–∫–æ–ª–∫–æ—Ç–æ –ø—Ä–æ—Å—Ç–æ push)
    const updatedRes = await fetch('/products');
    const updatedProducts = await updatedRes.json();
    allProducts.length = 0;
    allProducts.push(...updatedProducts);

    renderProducts(allProducts);
    renderStats(allProducts);

    // –ù—É–ª–∏—Ä–∞–º–µ —Ñ–æ—Ä–º–∞—Ç–∞
    document.getElementById('newName').value = '';
    document.getElementById('newPlu').value = '';
    document.getElementById('newGroup').value = '';
    imageInput.value = '';

    showNotification('–ü—Ä–æ–¥—É–∫—Ç—ä—Ç –µ –¥–æ–±–∞–≤–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  } catch (err) {
    console.error('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ:', err);
    showNotification('–í—ä–∑–Ω–∏–∫–Ω–∞ –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞—Ç–∞.', 'error');
  }
});

// üîî –§—É–Ω–∫—Ü–∏—è –∑–∞ –ø–æ–∫–∞–∑–≤–∞–Ω–µ –Ω–∞ –∏–∑–≤–µ—Å—Ç–∏–µ
function showNotification(message, type = 'success') {
  const notif = document.getElementById('notification');
  notif.textContent = message;
  notif.className = 'notification'; // reset
  if (type === 'error') notif.classList.add('error');
  notif.style.display = 'block';

  setTimeout(() => {
    notif.style.display = 'none';
  }, 3000);
}

// –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ—Ç–æ –Ω–∞ –ø—Ä–æ–¥—É–∫—Ç–∏ –ø—Ä–∏ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ç–∞
loadProducts();